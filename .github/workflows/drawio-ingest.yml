name: Draw.io + GitIngest Integration

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'diagrams/generated/**'
      - 'repo-analysis.txt'
  pull_request:
    branches: [ main, master ]
  schedule:
    # Auto-update GitIngest and diagrams daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      include_diagrams:
        description: 'Include diagram generation'
        required: false
        default: 'true'
        type: boolean
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: 'false'
        type: boolean

jobs:
  drawio-ingest-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install gitingest
        pip install pyyaml requests

    - name: Generate GitIngest analysis
      run: |
        echo "üîç Generating GitIngest analysis for repository..."

        # Always generate fresh analysis - this ensures diagrams stay current
        gitingest . -o repo-analysis.txt \
          --include-pattern "*.py" \
          --include-pattern "*.js" \
          --include-pattern "*.ts" \
          --include-pattern "*.md" \
          --include-pattern "*.yml" \
          --include-pattern "*.yaml" \
          --include-pattern "*.json" \
          --include-pattern "*.drawio" \
          --exclude-pattern "node_modules/*" \
          --exclude-pattern "*.log" \
          --exclude-pattern ".git/*"

        echo "üìä Repository analysis complete"
        echo "üìà Analysis size: $(wc -l < repo-analysis.txt) lines"

        # Create timestamp for tracking updates
        echo "last_updated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" > diagrams/analysis-metadata.yml
        echo "commit_sha: ${{ github.sha }}" >> diagrams/analysis-metadata.yml
        echo "repository: ${{ github.repository }}" >> diagrams/analysis-metadata.yml
        echo "trigger: ${{ github.event_name }}" >> diagrams/analysis-metadata.yml

    - name: Create draw.io diagram templates
      run: |
        mkdir -p diagrams/generated
        python -c "
import json
import os

# Read GitIngest analysis
with open('repo-analysis.txt', 'r', encoding='utf-8') as f:
    analysis = f.read()

# Create architecture diagram metadata
diagram_data = {
    'repository': '${{ github.repository }}',
    'branch': '${{ github.ref_name }}',
    'timestamp': '${{ github.event.head_commit.timestamp }}',
    'analysis_tokens': len(analysis.split()),
    'diagram_templates': [
        {
            'name': 'Repository Architecture',
            'type': 'flowchart',
            'description': 'High-level repository structure and data flow',
            'suggested_elements': ['Input', 'Middle', 'Output', 'MCP Registry', 'Composio Integration']
        },
        {
            'name': 'MCP Tool Routing',
            'type': 'network',
            'description': 'Tool routing and fallback mechanisms',
            'suggested_elements': ['Composio Hub', 'Neon', 'Firebase', 'Apify', 'Fallback Tools']
        },
        {
            'name': 'CI/CD Workflow',
            'type': 'process',
            'description': 'GitHub Actions workflow visualization',
            'suggested_elements': ['Trigger', 'Build', 'Test', 'Deploy', 'Notify']
        },
        {
            'name': 'Doctrine Branches',
            'type': 'hierarchy',
            'description': 'Branch structure and auto-inclusion system',
            'suggested_elements': ['Master', 'Actions-Workflows', 'AI-Human-Readable', 'DrawIO-Ingest']
        }
    ]
}

with open('diagrams/generated/diagram-metadata.json', 'w') as f:
    json.dump(diagram_data, f, indent=2)
"

    - name: Generate draw.io XML templates
      run: |
        python -c "
import json

# Create basic draw.io XML template
drawio_template = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<mxfile host=\"app.diagrams.net\" modified=\"{timestamp}\" agent=\"IMO-Creator-GitIngest\" version=\"22.1.16\" etag=\"{etag}\" type=\"device\">
  <diagram name=\"Repository Architecture\" id=\"architecture\">
    <mxGraphModel dx=\"1422\" dy=\"794\" grid=\"1\" gridSize=\"10\" guides=\"1\" tooltips=\"1\" connect=\"1\" arrows=\"1\" fold=\"1\" page=\"1\" pageScale=\"1\" pageWidth=\"827\" pageHeight=\"1169\" math=\"0\" shadow=\"0\">
      <root>
        <mxCell id=\"0\" />
        <mxCell id=\"1\" parent=\"0\" />

        <!-- Input Layer -->
        <mxCell id=\"input\" value=\"Input Layer\\nData Validation &amp; Mapping\" style=\"rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;\" vertex=\"1\" parent=\"1\">
          <mxGeometry x=\"160\" y=\"120\" width=\"120\" height=\"60\" as=\"geometry\" />
        </mxCell>

        <!-- Middle Layer -->
        <mxCell id=\"middle\" value=\"Middle Layer\\nMCP Processing &amp; Routing\" style=\"rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;\" vertex=\"1\" parent=\"1\">
          <mxGeometry x=\"160\" y=\"240\" width=\"120\" height=\"60\" as=\"geometry\" />
        </mxCell>

        <!-- Output Layer -->
        <mxCell id=\"output\" value=\"Output Layer\\nNotification &amp; Reporting\" style=\"rounded=1;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;\" vertex=\"1\" parent=\"1\">
          <mxGeometry x=\"160\" y=\"360\" width=\"120\" height=\"60\" as=\"geometry\" />
        </mxCell>

        <!-- Composio Hub -->
        <mxCell id=\"composio\" value=\"Composio MCP Hub\\n{composio_url}\" style=\"ellipse;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;\" vertex=\"1\" parent=\"1\">
          <mxGeometry x=\"400\" y=\"220\" width=\"140\" height=\"100\" as=\"geometry\" />
        </mxCell>

        <!-- Flow arrows -->
        <mxCell id=\"flow1\" style=\"edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;\" edge=\"1\" parent=\"1\" source=\"input\" target=\"middle\">
          <mxGeometry relative=\"1\" as=\"geometry\" />
        </mxCell>

        <mxCell id=\"flow2\" style=\"edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;\" edge=\"1\" parent=\"1\" source=\"middle\" target=\"output\">
          <mxGeometry relative=\"1\" as=\"geometry\" />
        </mxCell>

        <mxCell id=\"flow3\" style=\"edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;\" edge=\"1\" parent=\"1\" source=\"middle\" target=\"composio\">
          <mxGeometry relative=\"1\" as=\"geometry\" />
        </mxCell>

      </root>
    </mxGraphModel>
  </diagram>
</mxfile>'''

import hashlib
import datetime

timestamp = datetime.datetime.now().isoformat()
etag = hashlib.md5(timestamp.encode()).hexdigest()[:8]
composio_url = 'https://composio-imo-creator-url.onrender.com'

template = drawio_template.format(
    timestamp=timestamp,
    etag=etag,
    composio_url=composio_url
)

with open('diagrams/generated/repository-architecture.drawio', 'w') as f:
    f.write(template)

print('Draw.io template created successfully')
"

    - name: Create diagram generation script
      run: |
        cat > generate_diagrams.py << 'EOF'
#!/usr/bin/env python3
\"\"\"
Generate altitude-based draw.io diagrams following Christmas tree backbone architecture
\"\"\"
import json
import os
import hashlib
from datetime import datetime

def create_altitude_overview_diagram():
    \"\"\"Create 40,000 ft strategic overview - Christmas tree backbone\"\"\"
    template = '''<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="app.diagrams.net" modified="{timestamp}" agent="IMO-Creator-Altitude-Generator" version="22.1.16">
  <diagram name="40k Ft - Strategic Overview" id="altitude-overview">
    <mxGraphModel dx="1422" dy="1200" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />

        <!-- Strategic Layer - 40,000 ft -->
        <mxCell id="strategic" value="üéØ Strategic Layer\\n40,000 ft\\n\\nBusiness Alignment\\nArchitectural Oversight\\nIMO-Creator Doctrine" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=14;fontStyle=1;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="300" y="50" width="200" height="100" as="geometry" />
        </mxCell>

        <!-- Christmas Tree Trunk - Overall Orchestrator -->
        <mxCell id="trunk" value="üéÑ TRUNK\\nOverall Orchestrator\\n30,000 ft\\n\\nCentral Routing\\nDomain Coordination\\nRequest Distribution" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;fontSize=12;fontStyle=1;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="350" y="200" width="100" height="150" as="geometry" />
        </mxCell>

        <!-- Input Branch - 20,000 ft -->
        <mxCell id="input-branch" value="üåø INPUT BRANCH\\n20,000 ft\\n\\nData Ingestion\\nValidation\\nMapping" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=10;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="150" y="400" width="120" height="80" as="geometry" />
        </mxCell>

        <!-- Middle Branch - 10,000 ft -->
        <mxCell id="middle-branch" value="üåø MIDDLE BRANCH\\n10,000 ft\\n\\nDatabase Ops\\nEnforcement\\nProcessing" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=10;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="340" y="400" width="120" height="80" as="geometry" />
        </mxCell>

        <!-- Output Branch - 5,000 ft -->
        <mxCell id="output-branch" value="üåø OUTPUT BRANCH\\n5,000 ft\\n\\nNotifications\\nReporting\\nArtifacts" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=10;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="530" y="400" width="120" height="80" as="geometry" />
        </mxCell>

        <!-- Infrastructure Layer - Ground Level -->
        <mxCell id="infrastructure" value="üèóÔ∏è INFRASTRUCTURE\\nGround Level\\n\\nComposio MCP Hub: {composio_url}\\nNeon ‚Ä¢ Firebase ‚Ä¢ Apify ‚Ä¢ Builder.io\\nFallbacks: n8n ‚Ä¢ Make ‚Ä¢ Zapier ‚Ä¢ Pipedream" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#f5f5f5;strokeColor=#666666;fontSize=9;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="200" y="520" width="400" height="80" as="geometry" />
        </mxCell>

        <!-- Altitude Labels -->
        <mxCell id="alt-40k" value="40k ft" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=10;fontStyle=2;" vertex="1" parent="1">
          <mxGeometry x="50" y="90" width="40" height="20" as="geometry" />
        </mxCell>

        <mxCell id="alt-30k" value="30k ft" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=10;fontStyle=2;" vertex="1" parent="1">
          <mxGeometry x="50" y="270" width="40" height="20" as="geometry" />
        </mxCell>

        <mxCell id="alt-20k" value="20k ft" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=10;fontStyle=2;" vertex="1" parent="1">
          <mxGeometry x="50" y="430" width="40" height="20" as="geometry" />
        </mxCell>

        <mxCell id="alt-ground" value="0 ft" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=10;fontStyle=2;" vertex="1" parent="1">
          <mxGeometry x="50" y="560" width="40" height="20" as="geometry" />
        </mxCell>

        <!-- Flow connections -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;strokeColor=#9673a6;" edge="1" parent="1" source="strategic" target="trunk" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=2;strokeColor=#82b366;" edge="1" parent="1" source="trunk" target="input-branch" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=2;strokeColor=#d6b656;" edge="1" parent="1" source="trunk" target="middle-branch" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=2;strokeColor=#6c8ebf;" edge="1" parent="1" source="trunk" target="output-branch" />

        <!-- Infrastructure connections -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=1;strokeColor=#666666;dashed=1;" edge="1" parent="1" source="input-branch" target="infrastructure" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=1;strokeColor=#666666;dashed=1;" edge="1" parent="1" source="middle-branch" target="infrastructure" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=1;strokeColor=#666666;dashed=1;" edge="1" parent="1" source="output-branch" target="infrastructure" />

        <!-- Legend -->
        <mxCell id="legend" value="üéÑ Christmas Tree Backbone\\n‚îÅ‚îÅ‚îÅ Strategic Flow\\n‚îÅ‚îÅ‚îÅ Domain Branches\\n‚îâ‚îâ‚îâ Infrastructure" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f5f5f5;strokeColor=#666666;align=left;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="680" y="50" width="120" height="80" as="geometry" />
        </mxCell>

      </root>
    </mxGraphModel>
  </diagram>
</mxfile>'''

    timestamp = datetime.now().isoformat()
    composio_url = "https://composio-imo-creator-url.onrender.com"

    diagram_content = template.format(
        timestamp=timestamp,
        composio_url=composio_url
    )

    with open('diagrams/generated/altitude-overview.drawio', 'w') as f:
        f.write(diagram_content)

    print("40k ft strategic overview diagram created")

def create_orchestrator_tree_diagram():
    \"\"\"Create 30,000 ft orchestrator tree - Christmas tree trunk with branches\"\"\"
    template = '''<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="app.diagrams.net" modified="{timestamp}" agent="IMO-Creator-Tree-Generator" version="22.1.16">
  <diagram name="30k Ft - Orchestrator Tree" id="orchestrator-tree">
    <mxGraphModel dx="1422" dy="794" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />

        <!-- Central Trunk - Overall Orchestrator -->
        <mxCell id="overall-orchestrator" value="üéÑ Overall Orchestrator\\n30,000 ft\\n\\nrole_id: overall-orchestrator\\nCapabilities:\\n‚Ä¢ Routing\\n‚Ä¢ Delegation\\n‚Ä¢ Coordination\\n\\nRoutes to domain orchestrators" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;fontSize=11;fontStyle=1;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="350" y="150" width="160" height="140" as="geometry" />
        </mxCell>

        <!-- Input Branch Orchestrator -->
        <mxCell id="input-orchestrator" value="üåø Input Orchestrator\\n20,000 ft\\n\\nrole_id: input-orchestrator\\nDomain: input\\nCoordinates:\\n‚Ä¢ Mapper ‚Üí Validator" style="ellipse;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="120" y="350" width="140" height="100" as="geometry" />
        </mxCell>

        <!-- Input Subagents -->
        <mxCell id="input-mapper" value="Mapper\\n20k ft\\ndata_mapping\\ntransformation" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="50" y="500" width="80" height="60" as="geometry" />
        </mxCell>

        <mxCell id="input-validator" value="Validator\\n20k ft\\nvalidation\\nschema_checking" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="150" y="500" width="80" height="60" as="geometry" />
        </mxCell>

        <!-- Middle Branch Orchestrator -->
        <mxCell id="middle-orchestrator" value="üåø Middle Orchestrator\\n10,000 ft\\n\\nrole_id: middle-orchestrator\\nDomain: middle\\nCoordinates:\\n‚Ä¢ DB ‚Üí Enforcer ‚Üí Apply" style="ellipse;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="350" y="350" width="140" height="100" as="geometry" />
        </mxCell>

        <!-- Middle Subagents -->
        <mxCell id="middle-db" value="Database\\n10k ft\\ndatabase_ops\\ndry_run, apply" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="280" y="500" width="80" height="60" as="geometry" />
        </mxCell>

        <mxCell id="middle-enforcer" value="Enforcer\\n10k ft\\nrule_enforcement\\npromotion_decision" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="380" y="500" width="80" height="60" as="geometry" />
        </mxCell>

        <!-- Output Branch Orchestrator -->
        <mxCell id="output-orchestrator" value="üåø Output Orchestrator\\n5,000 ft\\n\\nrole_id: output-orchestrator\\nDomain: output\\nCoordinates:\\n‚Ä¢ Notifier ‚Üí Reporter" style="ellipse;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="580" y="350" width="140" height="100" as="geometry" />
        </mxCell>

        <!-- Output Subagents -->
        <mxCell id="output-notifier" value="Notifier\\n5k ft\\nemail, slack\\nwebhook, alerts" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="510" y="500" width="80" height="60" as="geometry" />
        </mxCell>

        <mxCell id="output-reporter" value="Reporter\\n5k ft\\nreport_generation\\nartifact_creation" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=9;" vertex="1" parent="1">
          <mxGeometry x="610" y="500" width="80" height="60" as="geometry" />
        </mxCell>

        <!-- Tree connections from trunk to branches -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;strokeColor=#82b366;" edge="1" parent="1" source="overall-orchestrator" target="input-orchestrator" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;strokeColor=#d6b656;" edge="1" parent="1" source="overall-orchestrator" target="middle-orchestrator" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeWidth=3;strokeColor=#6c8ebf;" edge="1" parent="1" source="overall-orchestrator" target="output-orchestrator" />

        <!-- Branch to subagent connections -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="input-orchestrator" target="input-mapper" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="input-orchestrator" target="input-validator" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="middle-orchestrator" target="middle-db" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="middle-orchestrator" target="middle-enforcer" />

        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="output-orchestrator" target="output-notifier" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="output-orchestrator" target="output-reporter" />

        <!-- Subagent flow connections -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;dashed=1;" edge="1" parent="1" source="input-mapper" target="input-validator" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;dashed=1;" edge="1" parent="1" source="middle-db" target="middle-enforcer" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;dashed=1;" edge="1" parent="1" source="output-notifier" target="output-reporter" />

        <!-- Altitude indicators -->
        <mxCell id="altitude-30k" value="30k ft" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=12;fontStyle=3;" vertex="1" parent="1">
          <mxGeometry x="50" y="200" width="50" height="30" as="geometry" />
        </mxCell>

        <mxCell id="altitude-branches" value="20k ft\\n10k ft\\n5k ft" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=10;fontStyle=3;" vertex="1" parent="1">
          <mxGeometry x="50" y="380" width="50" height="60" as="geometry" />
        </mxCell>

        <!-- Title -->
        <mxCell id="title" value="üéÑ Christmas Tree Orchestrator Architecture\\nTrunk: Overall Orchestrator (30k ft)\\nBranches: Domain Orchestrators + Subagents" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f0f0f0;strokeColor=#333333;fontSize=12;fontStyle=1;align=center;" vertex="1" parent="1">
          <mxGeometry x="300" y="50" width="260" height="60" as="geometry" />
        </mxCell>

      </root>
    </mxGraphModel>
  </diagram>
</mxfile>'''

    timestamp = datetime.now().isoformat()

    diagram_content = template.format(timestamp=timestamp)

    with open('diagrams/generated/orchestrator-tree.drawio', 'w') as f:
        f.write(diagram_content)

    print("30k ft orchestrator tree diagram created")

def create_mcp_routing_diagram():
    \"\"\"Create MCP tool routing diagram\"\"\"
    template = '''<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="app.diagrams.net" modified="{timestamp}" agent="IMO-Creator-MCP-Generator" version="22.1.16">
  <diagram name="MCP Tool Routing" id="mcp-routing">
    <mxGraphModel dx="1422" dy="794" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />

        <!-- Central Composio Hub -->
        <mxCell id="hub" value="Composio MCP Hub\\n{composio_endpoint}" style="ellipse;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;fontSize=12;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="350" y="250" width="160" height="100" as="geometry" />
        </mxCell>

        <!-- Primary MCP Tools -->
        <mxCell id="neon" value="Neon\\nPostgreSQL" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="150" y="150" width="100" height="60" as="geometry" />
        </mxCell>

        <mxCell id="firebase" value="Firebase\\nNoSQL" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="150" y="250" width="100" height="60" as="geometry" />
        </mxCell>

        <mxCell id="apify" value="Apify\\nWeb Scraping" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="150" y="350" width="100" height="60" as="geometry" />
        </mxCell>

        <mxCell id="builder" value="Builder.io\\nVisual Dev" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="150" y="450" width="100" height="60" as="geometry" />
        </mxCell>

        <!-- Fallback Tools -->
        <mxCell id="n8n" value="n8n\\nWorkflow" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="600" y="150" width="100" height="60" as="geometry" />
        </mxCell>

        <mxCell id="make" value="Make.com\\nAutomation" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="600" y="250" width="100" height="60" as="geometry" />
        </mxCell>

        <mxCell id="zapier" value="Zapier\\nIntegration" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="600" y="350" width="100" height="60" as="geometry" />
        </mxCell>

        <mxCell id="pipedream" value="Pipedream\\nWorkflow" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="600" y="450" width="100" height="60" as="geometry" />
        </mxCell>

        <!-- Connections to hub -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#82b366;strokeWidth=2;" edge="1" parent="1" source="neon" target="hub" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#82b366;strokeWidth=2;" edge="1" parent="1" source="firebase" target="hub" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#82b366;strokeWidth=2;" edge="1" parent="1" source="apify" target="hub" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#82b366;strokeWidth=2;" edge="1" parent="1" source="builder" target="hub" />

        <!-- Fallback connections -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#d6b656;strokeWidth=1;dashed=1;" edge="1" parent="1" source="hub" target="n8n" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#d6b656;strokeWidth=1;dashed=1;" edge="1" parent="1" source="hub" target="make" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#d6b656;strokeWidth=1;dashed=1;" edge="1" parent="1" source="hub" target="zapier" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;strokeColor=#d6b656;strokeWidth=1;dashed=1;" edge="1" parent="1" source="hub" target="pipedream" />

        <!-- Legend -->
        <mxCell id="legend" value="Legend:\\n‚îÅ‚îÅ‚îÅ Primary MCP Tools\\n‚îâ‚îâ‚îâ Fallback Tools" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f5f5f5;strokeColor=#666666;align=left;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="50" y="50" width="150" height="60" as="geometry" />
        </mxCell>

      </root>
    </mxGraphModel>
  </diagram>
</mxfile>'''

    timestamp = datetime.now().isoformat()
    composio_endpoint = "https://composio-imo-creator-url.onrender.com"

    diagram_content = template.format(
        timestamp=timestamp,
        composio_endpoint=composio_endpoint
    )

    with open('diagrams/generated/mcp-routing.drawio', 'w') as f:
        f.write(diagram_content)

    print("MCP routing diagram created")

def create_workflow_diagram():
    \"\"\"Create CI/CD workflow diagram\"\"\"
    template = '''<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="app.diagrams.net" modified="{timestamp}" agent="IMO-Creator-Workflow-Generator" version="22.1.16">
  <diagram name="CI/CD Workflow" id="cicd-workflow">
    <mxGraphModel dx="1422" dy="794" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />

        <!-- Doctrine Branches -->
        <mxCell id="actions-branch" value="actions-workflows\\nBranch" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="100" y="120" width="120" height="60" as="geometry" />
        </mxCell>

        <mxCell id="ai-branch" value="ai-human-readable\\nBranch" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="100" y="220" width="120" height="60" as="geometry" />
        </mxCell>

        <mxCell id="drawio-branch" value="drawio-ingest\\nBranch" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="100" y="320" width="120" height="60" as="geometry" />
        </mxCell>

        <!-- Auto-scaffold process -->
        <mxCell id="scaffold" value="Auto-Scaffold\\nProcess" style="diamond;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="350" y="200" width="120" height="80" as="geometry" />
        </mxCell>

        <!-- New Repository -->
        <mxCell id="new-repo" value="New Repository\\nWith All Workflows" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="600" y="210" width="120" height="60" as="geometry" />
        </mxCell>

        <!-- Workflow types -->
        <mxCell id="compliance" value="‚úì Compliance\\n‚úì Tests\\n‚úì Docs\\n‚úì Deploy" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;align=left;" vertex="1" parent="1">
          <mxGeometry x="300" y="50" width="100" height="80" as="geometry" />
        </mxCell>

        <mxCell id="ai-readable" value="‚úì GitIngest\\n‚úì Diagrams\\n‚úì Summaries" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;align=left;" vertex="1" parent="1">
          <mxGeometry x="420" y="50" width="100" height="80" as="geometry" />
        </mxCell>

        <mxCell id="visual" value="‚úì Draw.io\\n‚úì Architecture\\n‚úì Visual Docs" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;align=left;" vertex="1" parent="1">
          <mxGeometry x="540" y="50" width="100" height="80" as="geometry" />
        </mxCell>

        <!-- Flow arrows -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="actions-branch" target="scaffold" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="ai-branch" target="scaffold" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="drawio-branch" target="scaffold" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="scaffold" target="new-repo" />

        <!-- Capability arrows -->
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;dashed=1;" edge="1" parent="1" source="compliance" target="scaffold" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;dashed=1;" edge="1" parent="1" source="ai-readable" target="scaffold" />
        <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;dashed=1;" edge="1" parent="1" source="visual" target="scaffold" />

      </root>
    </mxGraphModel>
  </diagram>
</mxfile>'''

    timestamp = datetime.now().isoformat()

    diagram_content = template.format(timestamp=timestamp)

    with open('diagrams/generated/cicd-workflow.drawio', 'w') as f:
        f.write(diagram_content)

    print("CI/CD workflow diagram created")

if __name__ == "__main__":
    os.makedirs('diagrams/generated', exist_ok=True)

    # Generate altitude-based Christmas tree architecture diagrams
    create_altitude_overview_diagram()           # 40k ft strategic
    create_orchestrator_tree_diagram()           # 30k ft trunk + branches
    create_mcp_routing_diagram()                 # Ground level infrastructure

    print("üéÑ All altitude-based Christmas tree diagrams generated successfully!")
    print("üìä Diagrams created:")
    print("   ‚Ä¢ 40k ft: Strategic Overview (Christmas tree backbone)")
    print("   ‚Ä¢ 30k ft: Orchestrator Tree (trunk + domain branches)")
    print("   ‚Ä¢ Ground: MCP Infrastructure (Composio hub + tools)")
    print("üéØ Architecture follows altitude hierarchy with Christmas tree structure")
EOF
        chmod +x generate_diagrams.py
        python generate_diagrams.py

    - name: Generate README for diagrams
      run: |
        cat > diagrams/README.md << 'EOF'
# IMO-Creator Diagrams

This directory contains automatically generated draw.io diagrams based on GitIngest repository analysis.

## Generated Diagrams

### Repository Architecture (`repository-architecture.drawio`)
- High-level view of Input‚ÜíMiddle‚ÜíOutput architecture
- Shows relationship between layers and Composio MCP hub
- Generated from GitIngest analysis

### MCP Tool Routing (`mcp-routing.drawio`)
- Visual representation of MCP tool connections
- Primary tools: Neon, Firebase, Apify, Builder.io
- Fallback tools: n8n, Make.com, Zapier, Pipedream
- Central Composio hub routing

### CI/CD Workflow (`cicd-workflow.drawio`)
- Doctrine branch auto-scaffolding process
- Shows how workflows are inherited by new repositories
- Includes compliance, AI-readable, and visual documentation workflows

## Usage

1. **View in VS Code**: Install the Draw.io Integration extension
2. **Edit Online**: Upload `.drawio` files to https://app.diagrams.net
3. **Export**: Generate PNG/SVG exports for documentation

## Auto-Generation

These diagrams are automatically updated by the `drawio-ingest.yml` GitHub Action whenever:
- Code is pushed to main/master branches
- Pull requests are created
- Manual workflow dispatch is triggered

The diagrams reflect the current repository structure as analyzed by GitIngest.
EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drawio-diagrams
        path: |
          diagrams/
          repo-analysis.txt
        retention-days: 30

    - name: Commit generated diagrams
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        if [ -n "$(git status --porcelain)" ]; then
          git add diagrams/
          git commit -m "üé® Auto-generate draw.io diagrams from GitIngest analysis

          - Repository architecture diagram
          - MCP tool routing visualization
          - CI/CD workflow mapping
          - Generated from commit ${{ github.sha }}

          ü§ñ Generated by drawio-ingest workflow"

          # Only push if this is not a pull request
          if [ "${{ github.event_name }}" = "push" ]; then
            git push
          fi
        else
          echo "No changes to commit"
        fi