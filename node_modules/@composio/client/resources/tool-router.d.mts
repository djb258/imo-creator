import { APIResource } from "../core/resource.mjs";
import { APIPromise } from "../core/api-promise.mjs";
import { RequestOptions } from "../internal/request-options.mjs";
export declare class ToolRouter extends APIResource {
    /**
     * Creates a new session for the tool router lab feature. This endpoint initializes
     * a new session with specified toolkits and their authentication configurations.
     * The session provides an isolated environment for testing and managing tool
     * routing logic with scoped MCP server access.
     *
     * @example
     * ```ts
     * const response = await client.toolRouter.createSession({
     *   user_id: 'user_123456789',
     *   config: {
     *     toolkits: [
     *       { toolkit: 'gmail', auth_config: 'auth_config_123' },
     *       { toolkit: 'slack', auth_config: 'auth_config_456' },
     *       { toolkit: 'github' },
     *     ],
     *   },
     * });
     * ```
     */
    createSession(body: ToolRouterCreateSessionParams, options?: RequestOptions): APIPromise<ToolRouterCreateSessionResponse>;
}
export interface ToolRouterCreateSessionResponse {
    /**
     * MCP server endpoint URL for this specific session
     */
    chat_session_mcp_url: string;
    /**
     * Generated session identifier
     */
    session_id: string;
}
export interface ToolRouterCreateSessionParams {
    /**
     * Unique user identifier for the session owner
     */
    user_id: string;
    /**
     * Session configuration including enabled toolkits and their auth configs
     */
    config?: ToolRouterCreateSessionParams.Config;
}
export declare namespace ToolRouterCreateSessionParams {
    /**
     * Session configuration including enabled toolkits and their auth configs
     */
    interface Config {
        /**
         * Whether to manually manage connections
         */
        manually_manage_connections?: boolean | null;
        /**
         * Array of toolkit configurations with optional auth configs
         */
        toolkits?: Array<Config.Toolkit>;
    }
    namespace Config {
        interface Toolkit {
            /**
             * Toolkit identifier (e.g., gmail, slack, github)
             */
            toolkit: string;
            /**
             * Specific auth configuration ID for this toolkit
             */
            auth_config?: string;
        }
    }
}
export declare namespace ToolRouter {
    export { type ToolRouterCreateSessionResponse as ToolRouterCreateSessionResponse, type ToolRouterCreateSessionParams as ToolRouterCreateSessionParams, };
}
//# sourceMappingURL=tool-router.d.mts.map