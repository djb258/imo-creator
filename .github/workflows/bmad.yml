name: BMAD
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches: [ main, master ]
jobs:
  factory_gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      - run: chmod +x bmad/*.sh scripts/** || true
      - name: Run scenario suite
        run: bash scripts/bmad/run_scenarios.sh || true
      - name: Build rolling baselines
        run: python3 scripts/bmad/baseline.py || true
  garage_checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Measure head
        run: |
          chmod +x bmad/*.sh || true
          ./bmad/measure.sh bash -lc 'npm test || make test || echo no-tests'
          cp logs/bmad/*.json head.json || echo '{}' > head.json
  heir_policy:
    runs-on: ubuntu-latest
    needs: [factory_gates, garage_checks]
    steps:
      - uses: actions/checkout@v4
      - run: python3 - <<'PY'
import os,glob,json,sys
strict=os.getenv("HEIR_STRICT","1")=="1"
required={"trace_id","process_id","blueprint_id","agent_id","duration_s","exit_code","ts"}
ok=True
for f in sorted(glob.glob("logs/bmad/*.log"))[-5:]:
  for line in open(f):
    try:
      obj=json.loads(line); miss=required-{*obj.keys()}
      if miss: print(f"[HEIR] missing {miss} in {f}"); ok=False
    except: pass
if not ok and strict: sys.exit(1)
print("[HEIR] ok (strict=%s)"%("1" if strict else "0"))
PY
  perf_guard:
    runs-on: ubuntu-latest
    needs: [garage_checks]
    permissions:
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - name: Fetch head and baseline
        run: |
          cp logs/baseline/rolling_median.json baseline.json || echo '{}' > baseline.json
          cp logs/bmad/*.json head.json || echo '{}' > head.json
      - name: Read PR labels
        id: labels
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "${{ github.event.pull_request.url }}/labels" | jq -r '.[].name' > pr_labels.txt || true
          echo "labels=$(tr '\n' ',' < pr_labels.txt)" >> $GITHUB_OUTPUT
      - name: Decide thresholds by lane
        id: lane
        run: |
          LAB="${{ steps.labels.outputs.labels }}"
          if echo "$LAB" | grep -qi 'risk:high'; then THRESH=2;
          elif echo "$LAB" | grep -qi 'risk:low'; then THRESH=10;
          else THRESH=5; fi
          echo "threshold=$THRESH" >> $GITHUB_OUTPUT
      - name: Compare head vs rolling median
        env:
          THRESH: ${{ steps.lane.outputs.threshold }}
        run: |
          python3 - <<PY
import json,os,sys
base=json.load(open('baseline.json'))
head=json.load(open('head.json'))
th=int(os.getenv('THRESH','5'))
bd=base.get(head.get('target','_default'))
hd=head.get('duration_s') or (head.get('duration_ms',0)/1000.0)
if not bd or not hd:
  print("No baseline or head duration; skipping.")
  sys.exit(0)
pct=(hd-bd)/bd*100.0
print(f"Regression {pct:.2f}% (base={bd}s, head={hd}s, thr={th}%)")
sys.exit(1 if pct>th else 0)
PY
  postmortem_if_bypass:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Fail if BMAD_BYPASS used without "postmortem" label
        run: |
          if git log -1 --pretty=%B | grep -q 'BMAD_BYPASS'; then
            curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "${{ github.event.pull_request.url }}/labels" | jq -r '.[].name' | grep -qi postmortem || exit 1
          fi