{
  "tool_name": "composio-mcp",
  "version": "1.0.0",
  "description": "Universal AI agent integration platform with 100+ services via Composio SDK",
  "tools": [
    {
      "name": "execute_composio_tool",
      "description": "Execute any Composio tool with HEIR/ORBT compliance",
      "input_schema": {
        "type": "object",
        "properties": {
          "toolkit": {
            "type": "string",
            "description": "Composio toolkit (github, gmail, slack, twilio, etc.)"
          },
          "tool": {
            "type": "string", 
            "description": "Specific tool within toolkit"
          },
          "arguments": {
            "type": "object",
            "description": "Tool-specific arguments"
          },
          "user_id": {
            "type": "string",
            "description": "User ID for connected account"
          }
        },
        "required": ["toolkit", "tool", "arguments"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "description": "Tool execution result"
          },
          "composio_metadata": {
            "type": "object",
            "description": "Composio execution metadata"
          }
        }
      }
    },
    {
      "name": "get_available_tools",
      "description": "Get available tools for specified toolkits",
      "input_schema": {
        "type": "object",
        "properties": {
          "toolkits": {
            "type": "array",
            "items": {"type": "string"},
            "description": "List of toolkits to get tools for"
          },
          "user_id": {
            "type": "string",
            "description": "User ID for authentication context"
          }
        },
        "required": ["toolkits"]
      }
    },
    {
      "name": "manage_connected_account",
      "description": "Create or manage connected accounts for external services",
      "input_schema": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": ["create", "get", "delete", "list"],
            "description": "Action to perform on connected account"
          },
          "app": {
            "type": "string", 
            "description": "App identifier (github, gmail, slack, etc.)"
          },
          "user_id": {
            "type": "string",
            "description": "User ID for account association"
          },
          "account_id": {
            "type": "string",
            "description": "Account ID for get/delete operations"
          },
          "auth_config": {
            "type": "object",
            "description": "Authentication configuration for create"
          }
        },
        "required": ["action", "user_id"]
      }
    },
    {
      "name": "get_composio_stats",
      "description": "Get Composio integration statistics and health",
      "input_schema": {
        "type": "object",
        "properties": {
          "include_usage": {
            "type": "boolean",
            "description": "Include usage statistics"
          }
        }
      }
    },
    {
      "name": "lovable_create_project",
      "description": "Create a new Lovable.dev project via Composio integration",
      "input_schema": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Natural language description of the UI/app to build"
          },
          "projectType": {
            "type": "string",
            "description": "Project framework type (react, nextjs, vue, etc.)",
            "default": "react"
          },
          "repo": {
            "type": "string",
            "description": "Optional GitHub repository URL to connect"
          },
          "visibility": {
            "type": "string",
            "enum": ["public", "private"],
            "description": "Project visibility setting",
            "default": "private"
          },
          "context": {
            "type": "string",
            "description": "Additional context or requirements for the project"
          }
        },
        "required": ["prompt"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string",
            "description": "Lovable.dev project identifier"
          },
          "project_url": {
            "type": "string",
            "description": "URL to access the created project"
          },
          "status": {
            "type": "string",
            "description": "Project creation status"
          },
          "lovable_metadata": {
            "type": "object",
            "description": "Lovable-specific metadata and settings"
          }
        }
      }
    },
    {
      "name": "lovable_get_project_status",
      "description": "Check the build/deployment status of a Lovable.dev project",
      "input_schema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Lovable.dev project ID to check"
          }
        },
        "required": ["projectId"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Current project status (building, ready, error, etc.)"
          },
          "build_progress": {
            "type": "number",
            "description": "Build completion percentage"
          },
          "deployment_url": {
            "type": "string",
            "description": "Live deployment URL if available"
          }
        }
      }
    },
    {
      "name": "lovable_get_project_details",
      "description": "Get comprehensive details about a Lovable.dev project",
      "input_schema": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Lovable.dev project ID to get details for"
          }
        },
        "required": ["projectId"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "project_info": {
            "type": "object",
            "description": "Complete project information and metadata"
          },
          "repository": {
            "type": "object",
            "description": "Connected repository information"
          },
          "deployment": {
            "type": "object",
            "description": "Deployment configuration and URLs"
          }
        }
      }
    },
    {
      "name": "lovable_scaffold_altitude_ui",
      "description": "Create Lovable.dev UI scaffolding based on CTB/Altitude specifications from this repository",
      "input_schema": {
        "type": "object",
        "properties": {
          "framework": {
            "type": "string",
            "description": "Target framework for the UI (nextjs, react, vue)",
            "default": "nextjs"
          }
        }
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string",
            "description": "Created Lovable.dev project ID"
          },
          "scaffold_info": {
            "type": "object",
            "description": "Information about the generated UI structure"
          },
          "ctb_integration": {
            "type": "object",
            "description": "Details about CTB/Altitude specifications used"
          }
        }
      }
    },
    {
      "name": "builder_io_create_space",
      "description": "Create a new Builder.io space for organizing content models",
      "input_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the space to create"
          },
          "description": {
            "type": "string",
            "description": "Description of the space"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization ID to create space in"
          }
        },
        "required": ["name"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "Created space identifier"
          },
          "space_name": {
            "type": "string",
            "description": "Name of the created space"
          }
        }
      }
    },
    {
      "name": "builder_io_create_model",
      "description": "Create a content model within a Builder.io space",
      "input_schema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "Space ID to create model in"
          },
          "name": {
            "type": "string",
            "description": "Name of the content model"
          },
          "model_type": {
            "type": "string",
            "enum": ["page", "section", "data"],
            "description": "Type of content model",
            "default": "page"
          },
          "schema": {
            "type": "object",
            "description": "Schema definition for the content model"
          }
        },
        "required": ["space_id", "name"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "model_id": {
            "type": "string",
            "description": "Created model identifier"
          },
          "model_name": {
            "type": "string",
            "description": "Name of the created model"
          }
        }
      }
    },
    {
      "name": "builder_io_create_content",
      "description": "Create content within a Builder.io model",
      "input_schema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "Space ID containing the model"
          },
          "model_id": {
            "type": "string",
            "description": "Model ID to create content in"
          },
          "name": {
            "type": "string",
            "description": "Name of the content entry"
          },
          "data": {
            "type": "object",
            "description": "Content data matching the model schema"
          },
          "published": {
            "type": "boolean",
            "description": "Whether to publish the content immediately",
            "default": false
          }
        },
        "required": ["space_id", "model_id", "name", "data"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "content_id": {
            "type": "string",
            "description": "Created content identifier"
          },
          "content_name": {
            "type": "string",
            "description": "Name of the created content"
          }
        }
      }
    },
    {
      "name": "builder_io_scaffold_altitude_cms",
      "description": "Create Builder.io CMS structure based on CTB/Altitude specifications from this repository",
      "input_schema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "Builder.io space ID to create models in"
          },
          "framework": {
            "type": "string",
            "description": "Target framework for the CMS (nextjs, react, vue)",
            "default": "nextjs"
          }
        },
        "required": ["space_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "created_models": {
            "type": "array",
            "description": "List of altitude-level models created"
          },
          "ctb_integration": {
            "type": "object",
            "description": "Details about CTB/Altitude specifications used"
          },
          "schema_used": {
            "type": "object",
            "description": "Schema template used for the models"
          }
        }
      }
    },
    {
      "name": "builder_io_get_content",
      "description": "Retrieve content from a Builder.io model",
      "input_schema": {
        "type": "object",
        "properties": {
          "space_id": {
            "type": "string",
            "description": "Space ID containing the content"
          },
          "model_id": {
            "type": "string",
            "description": "Model ID to get content from"
          },
          "content_id": {
            "type": "string",
            "description": "Optional specific content ID to retrieve"
          }
        },
        "required": ["space_id", "model_id"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "description": "Array of content entries"
          },
          "total_count": {
            "type": "number",
            "description": "Total number of content entries"
          }
        }
      }
    },
    {
      "name": "figma_export_to_code",
      "description": "Export Figma designs to React/Vue/Angular code via Composio integration",
      "input_schema": {
        "type": "object",
        "properties": {
          "fileKey": {
            "type": "string",
            "description": "Figma file key from the URL"
          },
          "nodeIds": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Specific node IDs to export"
          },
          "framework": {
            "type": "string",
            "enum": ["react", "vue", "angular", "svelte"],
            "description": "Target framework for code generation",
            "default": "react"
          },
          "outputFormat": {
            "type": "string",
            "enum": ["jsx", "tsx", "vue", "ts"],
            "description": "Output file format",
            "default": "tsx"
          }
        },
        "required": ["fileKey"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "components": {
            "type": "array",
            "description": "Generated component code"
          },
          "styles": {
            "type": "object",
            "description": "Associated styles (CSS, Tailwind, etc.)"
          }
        }
      }
    },
    {
      "name": "figma_create_design_system",
      "description": "Create a complete design system in Figma from specifications",
      "input_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the design system"
          },
          "description": {
            "type": "string",
            "description": "Description of the design system"
          },
          "baseComponents": {
            "type": "array",
            "items": {"type": "string"},
            "description": "List of base components to create"
          },
          "colorPalette": {
            "type": "object",
            "description": "Color palette definitions"
          },
          "typography": {
            "type": "object",
            "description": "Typography scale and styles"
          }
        },
        "required": ["name"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "design_system_id": {
            "type": "string",
            "description": "Created design system identifier"
          },
          "figma_file_url": {
            "type": "string",
            "description": "URL to the Figma file"
          }
        }
      }
    },
    {
      "name": "figma_sync_components",
      "description": "Sync Figma components with code repository",
      "input_schema": {
        "type": "object",
        "properties": {
          "sourceFileKey": {
            "type": "string",
            "description": "Source Figma file key"
          },
          "targetRepo": {
            "type": "string",
            "description": "Target repository path"
          },
          "syncMode": {
            "type": "string",
            "enum": ["one-way", "two-way"],
            "description": "Synchronization mode",
            "default": "one-way"
          },
          "componentFilter": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Filter specific components to sync"
          }
        },
        "required": ["sourceFileKey", "targetRepo"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "sync_id": {
            "type": "string",
            "description": "Synchronization session ID"
          },
          "components_synced": {
            "type": "array",
            "description": "List of synced components with status"
          }
        }
      }
    },
    {
      "name": "figma_scaffold_from_altitude",
      "description": "Create Figma design structure from CTB/Altitude specifications",
      "input_schema": {
        "type": "object",
        "properties": {
          "framework": {
            "type": "string",
            "description": "Design framework approach",
            "default": "figma"
          }
        }
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "figma_file_id": {
            "type": "string",
            "description": "Created Figma file ID"
          },
          "figma_file_url": {
            "type": "string",
            "description": "URL to the Figma file"
          },
          "pages_created": {
            "type": "number",
            "description": "Number of pages created"
          },
          "ctb_integration": {
            "type": "object",
            "description": "CTB/Altitude integration details"
          }
        }
      }
    },
    {
      "name": "smartsheet_create_sheet",
      "description": "Create a new Smartsheet with specified columns and configuration",
      "input_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the new sheet"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {"type": "string"},
                "type": {"type": "string", "enum": ["TEXT_NUMBER", "DATE", "CONTACT_LIST", "PICKLIST", "CHECKBOX"]},
                "options": {"type": "array", "items": {"type": "string"}},
                "primary": {"type": "boolean"}
              }
            },
            "description": "Column definitions for the sheet"
          },
          "templateId": {
            "type": "string",
            "description": "Optional template ID to create from"
          },
          "folderLocation": {
            "type": "string",
            "description": "Folder to create the sheet in"
          }
        },
        "required": ["name"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "sheet_id": {
            "type": "string",
            "description": "ID of the created sheet"
          },
          "permalink": {
            "type": "string",
            "description": "Direct link to the sheet"
          },
          "columns_created": {
            "type": "number",
            "description": "Number of columns created"
          }
        }
      }
    },
    {
      "name": "smartsheet_get_sheets",
      "description": "Retrieve list of available Smartsheets",
      "input_schema": {
        "type": "object",
        "properties": {
          "includeAll": {
            "type": "boolean",
            "description": "Include all accessible sheets",
            "default": false
          },
          "folderFilter": {
            "type": "string",
            "description": "Filter by specific folder ID"
          },
          "modifiedSince": {
            "type": "string",
            "description": "Only sheets modified since this date (ISO format)"
          }
        }
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "sheets": {
            "type": "array",
            "description": "Array of sheet objects"
          },
          "total_count": {
            "type": "number",
            "description": "Total number of sheets"
          }
        }
      }
    },
    {
      "name": "smartsheet_add_rows",
      "description": "Add new rows to a Smartsheet",
      "input_schema": {
        "type": "object",
        "properties": {
          "sheetId": {
            "type": "string",
            "description": "ID of the sheet to add rows to"
          },
          "rows": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cells": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "columnId": {"type": "string"},
                      "value": {"type": "string"}
                    }
                  }
                }
              }
            },
            "description": "Array of row objects to add"
          },
          "toTop": {
            "type": "boolean",
            "description": "Add rows to top of sheet",
            "default": false
          },
          "parentId": {
            "type": "string",
            "description": "Parent row ID for hierarchical placement"
          },
          "siblingId": {
            "type": "string",
            "description": "Sibling row ID for positioning"
          }
        },
        "required": ["sheetId", "rows"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "rows_added": {
            "type": "number",
            "description": "Number of rows successfully added"
          },
          "added_row_ids": {
            "type": "array",
            "description": "IDs of the newly added rows"
          }
        }
      }
    },
    {
      "name": "smartsheet_update_rows",
      "description": "Update existing rows in a Smartsheet",
      "input_schema": {
        "type": "object",
        "properties": {
          "sheetId": {
            "type": "string",
            "description": "ID of the sheet containing rows to update"
          },
          "rowUpdates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {"type": "string"},
                "cells": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "columnId": {"type": "string"},
                      "value": {"type": "string"}
                    }
                  }
                }
              }
            },
            "description": "Array of row update objects"
          }
        },
        "required": ["sheetId", "rowUpdates"]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "rows_updated": {
            "type": "number",
            "description": "Number of rows successfully updated"
          },
          "updated_row_ids": {
            "type": "array",
            "description": "IDs of the updated rows"
          }
        }
      }
    },
    {
      "name": "smartsheet_scaffold_from_altitude",
      "description": "Create Smartsheet project structure from CTB/Altitude specifications",
      "input_schema": {
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "description": "Name for the project workspace",
            "default": "CTB-Altitude Project"
          },
          "folderLocation": {
            "type": "string",
            "description": "Folder to create project structure in"
          }
        }
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "workspace_id": {
            "type": "string",
            "description": "Created workspace identifier"
          },
          "master_sheet_id": {
            "type": "string",
            "description": "Master project sheet ID"
          },
          "altitude_sheet_ids": {
            "type": "array",
            "description": "IDs of altitude-level sheets"
          },
          "ctb_integration": {
            "type": "object",
            "description": "CTB/Altitude integration details"
          }
        }
      }
    }
  ],
  "manifest": {
    "required_fields": [
      "unique_id",
      "process_id",
      "orbt_layer",
      "blueprint_version"
    ]
  },
  "compliance_checklist": {
    "heir_compliance": true,
    "orbt_layer_5": true,
    "mantis_logging": true,
    "kill_switch": true,
    "payload_validation": true,
    "composio_integration": true
  },
  "orbt_escalation_matrix": {
    "layer_1": "Read operations only",
    "layer_2": "Basic CRUD operations",
    "layer_3": "Business logic execution",
    "layer_4": "Cross-system integration",
    "layer_5": "Full operational access",
    "layer_6": "Administrative functions", 
    "layer_7": "System-level operations"
  },
  "heir_compliance": {
    "unique_id": "HEIR-2024-12-COMPOSIO-TOOLS-01",
    "layer": 5,
    "process_tracking": true,
    "audit_trail": true,
    "external_service_integration": true
  },
  "composio_integration": {
    "supported_toolkits": [
      "github", "gmail", "slack", "twilio", "stripe", "notion", 
      "hubspot", "salesforce", "discord", "linear", "jira",
      "google_calendar", "google_drive", "dropbox", "asana",
      "trello", "monday", "clickup", "zendesk", "intercom",
      "lovable", "builder_io", "figma", "smartsheet"
    ],
    "authentication_methods": [
      "oauth2", "api_key", "bearer_token", "basic_auth"
    ],
    "compliance_features": {
      "automatic_retry": true,
      "rate_limiting": true,
      "error_handling": true,
      "telemetry": true
    }
  }
}