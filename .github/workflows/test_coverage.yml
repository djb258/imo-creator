name: Test Coverage

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

jobs:
  test-python:
    name: Python Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-timeout
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run pytest with coverage
        run: |
          pytest --cov --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Coverage comment
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  test-bash-scripts:
    name: Bash Script Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Make test script executable
        run: chmod +x tests/test_ctb_scripts.sh

      - name: Run bash script tests
        run: bash tests/test_ctb_scripts.sh

      - name: Verify CTB enforcement passes
        run: |
          chmod +x global-config/scripts/ctb_enforce.sh
          bash global-config/scripts/ctb_enforce.sh

  test-registry:
    name: MCP Registry Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pytest
        run: pip install pytest

      - name: Run registry validation tests
        run: pytest tests/test_registry.py -v

      - name: Validate JSON structure
        run: |
          python -m json.tool config/mcp_registry.json > /dev/null
          echo "✅ MCP registry JSON is valid"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-python, test-bash-scripts, test-registry]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "🧪 Test Summary"
          echo "Python Tests: ${{ needs.test-python.result }}"
          echo "Bash Script Tests: ${{ needs.test-bash-scripts.result }}"
          echo "Registry Validation: ${{ needs.test-registry.result }}"

          if [[ "${{ needs.test-python.result }}" == "success" ]] && \
             [[ "${{ needs.test-bash-scripts.result }}" == "success" ]] && \
             [[ "${{ needs.test-registry.result }}" == "success" ]]; then
            echo "✅ All tests passed"
            exit 0
          else
            echo "❌ Some tests failed"
            exit 1
          fi
