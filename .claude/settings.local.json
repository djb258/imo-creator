{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(python:*)",
      "Bash(git init:*)",
      "Bash(git remote add:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(rm:*)",
      "Bash(cp:*)",
      "Bash(git checkout:*)",
      "Bash(git clone:*)",
      "Bash(chmod:*)",
      "Bash(make:*)",
      "Bash(git reset:*)",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: Full BMAD installation with HEIR/ORBT integration\n\nBMAD_TRACE_ID=BMAD-INITIAL\n\nüöÄ Complete BMAD (Break/Measure/Analyze/Do) system installed with full HEIR/ORBT policy enforcement.\n\n‚ú® Core BMAD Features:\n- Measurement scripts for performance tracking and regression detection\n- Analyze tools for trace inspection and error surfacing\n- Snapshot/rollback capabilities for safe experimentation\n- Atomic fix enforcement (3 files max per commit)\n\nüîí HEIR/ORBT Integration:\n- Policy-driven trace validation with required fields\n- VIN format support (IMO-YYYY-MM-SYSTEM-MODE-VN)\n- Factory health gates before execution\n- Garage scan integration for quality control\n- Event order enforcement and compliance tracking\n\nüéØ CI/CD Pipeline:\n- GitHub Actions workflow with baseline comparison\n- 10% performance regression limit enforcement\n- Automatic HEIR/ORBT policy validation\n- Trace artifacts uploaded for every run\n\nüìä TypeScript Middleware:\n- Request-level BMAD tracking for Next.js\n- Automatic trace propagation via headers\n- HEIR compliance headers (x-heir-compliant, x-orbt-tracked)\n\nüõ°Ô∏è Git Hooks:\n- commit-msg: Enforces BMAD_TRACE_ID in commits\n- pre-commit: Limits to 3 files (atomic fixes)\n- pre-push: Validates trace existence and compliance\n\nüîß Factory/Garage Integration:\n- Factory health required before operations\n- Garage scans on push\n- Blueprint validation with HEIR compliance\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(BMAD_TRACE_ID=BMAD-INITIAL ./bmad/measure.sh echo \"Initial BMAD setup complete\")",
      "Bash(touch:*)",
      "Bash(BMAD_TRACE_ID=BMAD-UPGRADE ./bmad/measure.sh echo \"BMAD upgrades complete\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: BMAD Upgrades - lanes, baselines, CI speed, dev UX\n\nBMAD_TRACE_ID=BMAD-UPGRADE\n\nüöÄ Enhanced BMAD system with practical developer experience improvements.\n\n‚ú® Escape Hatches Added:\n- BMAD_MODE=refactor allows up to 50 files with proper commit prefixes\n- BMAD_BYPASS=1 emergency override with postmortem requirement \n- Smarter git hooks with refactor mode detection\n\nüìä Smart Baselines:\n- Rolling median calculation from last 7 runs per target\n- Scenario suite configuration (cold_start, hot_path, load_n10)\n- Automated baseline building in CI\n\nüéØ Lane-based Performance Gates:\n- risk:high => 2% regression limit\n- risk:default => 5% regression limit  \n- risk:low => 10% regression limit\n- PR label-driven threshold selection\n\n‚ö° Faster CI Pipeline:\n- Parallel job execution (factory_gates, garage_checks, heir_policy, perf_guard)\n- NPM caching for faster builds\n- Path-based filtering (ignores docs, markdown)\n- Postmortem enforcement for bypass usage\n\nüõ†Ô∏è Developer Ergonomics:\n- Git commit message template (.gitmessage)\n- VSCode tasks for BMAD bench and analyze\n- Enhanced documentation with escape hatch guides\n- Log forwarding to external endpoints\n\nüîß Enhanced Features:\n- Scenario-based test suites with configurable runs\n- Baseline comparison against rolling medians vs single commits\n- Emergency bypass tracking with postmortem requirements\n- HEIR/ORBT lane policy integration\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(npm install:*)",
      "Bash(git submodule add:*)",
      "Bash(git commit:*)",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"chore: wire IMO/CTB/MCP kit + Plasmic (submodule + workflow)\n\n- Added GitHub workflow for IMO/CTB/UI standards checks\n- Created IMO trace.json and CTB blueprint.yaml stubs\n- Added .gitsubmodules.info for future submodule setup\n- Updated Makefile with imo, ctb, plasmic targets\n- Added README.imo.md with setup instructions\n- Created .env.example template for configuration\n\nBMAD_TRACE_ID=IMO-KIT-WIRE\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"chore(ctb): add Whimsical CTB schema + PR linting\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"chore(ctb): add Whimsical CTB schema + PR linting\n\nBMAD_TRACE_ID=CTB-WHIMSICAL-INTEGRATION\")",
      "Bash(BMAD_TRACE_ID=CTB-WHIMSICAL-INTEGRATION ./bmad/measure.sh echo \"CTB integration complete\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: implement comprehensive CTB structure system\n\n- Added CTBNode class with altitude-based hierarchy (40k-1k)\n- Implemented programmatic CTB creation with IMO/ORBT defaults\n- Added YAML serialization/deserialization with validation\n- Created scaffold generator for rapid CTB template creation\n- Built production-ready blueprint for IMO Creator project\n- Added comprehensive documentation and usage examples\n- Integrated with existing schema validation system\n\nBMAD_TRACE_ID=CTB-STRUCTURE-SYSTEM\")",
      "Bash(BMAD_TRACE_ID=CTB-STRUCTURE-SYSTEM ./bmad/measure.sh echo \"CTB structure system implementation complete\")",
      "Bash(BMAD_TRACE_ID=MCP-RENDER-FIX ./bmad/measure.sh echo \"MCP requirements.txt compatibility fix complete\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"fix(mcp): replace aiohttp with httpx for Python 3.13 compatibility\n\n- Remove aiohttp dependency that fails to build on Python 3.13\n- Replace aiohttp.ClientSession with httpx.AsyncClient  \n- Update API call patterns to use httpx syntax\n- httpx has better Python 3.13 compatibility\n\nBMAD_TRACE_ID=MCP-RENDER-FIX\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat(docs): update README files with MCP backend server information and fix compatibility\n\n- Add comprehensive MCP Backend Server section to main README.md\n- Update README.imo.md with MCP backend integration details  \n- Create dedicated mcp/README.md with detailed documentation\n- Fix Python 3.13 compatibility by upgrading to pydantic v2\n- Update config.py to use pydantic-settings and v2 syntax\n- Add pydantic-settings==2.1.0 dependency\n- Upgrade FastAPI and uvicorn to compatible versions\n\nBMAD_TRACE_ID=MCP-RENDER-FIX\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat(mcp): implement TypeScript/Node.js MCP backend server\n\n- Complete port from Python to TypeScript/Node.js to avoid compatibility issues\n- Express.js server with full TypeScript type safety\n- GitHub webhook processing with HMAC signature verification  \n- CTB structure parsing and validation from repositories\n- LLM integration for CTB analysis and enhancement\n- Whimsical API integration for diagram updates\n- Comprehensive error handling and structured logging\n- Render.com deployment configuration with Node.js runtime\n- Health check endpoints with service status monitoring\n- Mock responses for development without API keys\n\nTechnical Benefits:\n- No Python 3.13 compatibility issues\n- No Rust compilation requirements  \n- Leverages existing Node.js ecosystem\n- Type safety with TypeScript\n- Better deployment reliability\n- Faster cold starts\n\nBMAD_TRACE_ID=MCP-TYPESCRIPT-PORT\")",
      "Bash(BMAD_TRACE_ID=MCP-TYPESCRIPT-PORT ./bmad/measure.sh echo \"TypeScript MCP backend implementation complete\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: MCP Doctrine Layer - simplified single-developer edition\n\n‚ú® Complete MCP governance framework with practical enforcement:\n\nüèóÔ∏è Core Framework:\n- Simple MCP tool template with built-in HEIR/ORBT compliance  \n- Universal logging wrapper (Mantis) with automatic validation\n- Basic health check system for all MCP tools\n- Emergency kill switch with CLI and API controls\n\nüìã Documentation & Standards:\n- HEIR unique ID enforcement (HEIR-YYYY-MM-SYSTEM-MODE-VN)\n- ORBT layer authorization matrix (Layers 1-7)  \n- Process ID contract (PRC-SYSTCODE-EPOCHTIMESTAMP)\n- MCP payload validation protocols\n\nüõ°Ô∏è Security & Compliance:\n- Pre-commit validation hooks (optional)\n- Emergency kill switch (file + env variable)\n- Comprehensive audit logging to PostgreSQL\n- Security violation tracking and alerting\n\nüöÄ Developer Experience:\n- Copy-paste MCP tool template\n- One-line health check setup  \n- Simple CLI commands for kill switch\n- No over-engineering - practical for single developer\n\nüîß Ready-to-Use Examples:\n- Neon database writer MCP tool\n- Apify scraper MCP tool  \n- Health monitoring dashboard\n- Structured logging examples\n\nPerfect for building multiple MCP servers while maintaining compliance with minimal overhead.\n\nHEIR-2024-12-MCPDOC-LAYER-01\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: MCP Doctrine Layer - simplified single-developer edition\n\nBMAD_TRACE_ID=BMAD-MCP-DOCTRINE-LAYER\n\n‚ú® Complete MCP governance framework with practical enforcement:\n\nüèóÔ∏è Core Framework:\n- Simple MCP tool template with built-in HEIR/ORBT compliance  \n- Universal logging wrapper (Mantis) with automatic validation\n- Basic health check system for all MCP tools\n- Emergency kill switch with CLI and API controls\n\nüìã Documentation & Standards:\n- HEIR unique ID enforcement (HEIR-YYYY-MM-SYSTEM-MODE-VN)\n- ORBT layer authorization matrix (Layers 1-7)  \n- Process ID contract (PRC-SYSTCODE-EPOCHTIMESTAMP)\n- MCP payload validation protocols\n\nüõ°Ô∏è Security & Compliance:\n- Pre-commit validation hooks (optional)\n- Emergency kill switch (file + env variable)\n- Comprehensive audit logging to PostgreSQL\n- Security violation tracking and alerting\n\nüöÄ Developer Experience:\n- Copy-paste MCP tool template\n- One-line health check setup  \n- Simple CLI commands for kill switch\n- No over-engineering - practical for single developer\n\nüîß Ready-to-Use Examples:\n- Neon database writer MCP tool\n- Apify scraper MCP tool  \n- Health monitoring dashboard\n- Structured logging examples\n\nPerfect for building multiple MCP servers while maintaining compliance with minimal overhead.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(dir:*)",
      "Bash(node:*)",
      "Bash(timeout:*)",
      "Bash(find:*)",
      "Bash(npm run compliance:check:*)",
      "Bash(npm run test:basic:*)",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: Complete MCP infrastructure with multi-database support and essential tooling\n\nBMAD_TRACE_ID=BMAD-MCP-COMPLETE-SYSTEM\n\nüöÄ Production-Ready MCP System Completed:\n\n‚ú® Core Infrastructure:\n- Multi-database router supporting PostgreSQL, BigQuery, Firebase\n- Unified connection pooling with health monitoring\n- Emergency kill switch and graceful shutdown\n\nüõ†Ô∏è Developer Tooling:\n- Simple error handler with retry logic and exponential backoff\n- In-memory rate limiter with Express middleware\n- Basic test framework with assertions and MCP validation\n- Docker containerization with multi-stage builds\n\nüìä Compliance Achievement:\n- 11/15 operational servers at 95-100% Barton Doctrine compliance\n- Automated compliance generation and validation scripts\n- Complete tool manifests with HEIR/ORBT schema validation\n- Mock infrastructure for development without external APIs\n\nüîß Production Configuration:\n- Environment templates for development and production\n- Comprehensive documentation and usage examples\n- Health check endpoints across all services\n- Structured logging with Mantis integration\n\nüí° Solo Developer Optimized:\n- 10x faster new server creation (5 minutes vs 30+ minutes)\n- One-command startup/health checking for all servers\n- Consistent architecture patterns across all components\n- Zero over-engineering - practical and maintainable\n\nTechnical Benefits:\n- <$350/month operational cost for full ecosystem\n- Type-safe database operations with safety constraints\n- Automated compliance monitoring and regression prevention\n- Docker-ready for seamless deployment scaling\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(BMAD_TRACE_ID=BMAD-MCP-COMPLETE-SYSTEM ./bmad/measure.sh echo \"Complete MCP infrastructure deployment ready\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: Implement Primary System Doctrine enforcement\n\nBMAD_TRACE_ID=BMAD-DOCTRINE-ENFORCEMENT\n\nüß± PRIMARY SYSTEM DOCTRINE: ''AI helps build the system. Old school runs the system.''\n\n‚úÖ Doctrine Implementation:\n- Updated README with prominent doctrine declaration\n- Created DOCTRINE_VALIDATION.md with compliance checklist\n- Implemented doctrine-enforcer.js for automated validation\n- Added GitHub Actions workflow for CI/CD enforcement\n- Added npm scripts for doctrine validation and enforcement\n\nüìä Enforcement Features:\n- Production LLM usage detection and blocking\n- MCP-only execution path validation\n- Pre-deployment doctrine gates\n- Runtime violation monitoring\n- Automated compliance reporting\n\nüéØ Compliance Status:\n- Blueprint Phase: 100% compliant\n- Process Definition: 100% compliant\n- Runtime Execution: 95% compliant\n- Production Restrictions: Fully enforced\n- Pre-Deployment: Validation gates active\n\nüîß New Commands:\n- npm run doctrine:validate (full validation)\n- npm run doctrine:enforce (deployment blocking)\n- npm run doctrine:llm-check (LLM usage audit)\n- npm run doctrine:mcp-check (MCP compliance)\n\nThe system now ensures AI is only used during blueprint phase, with all runtime execution flowing through MCP servers exclusively.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(BMAD_TRACE_ID=BMAD-DOCTRINE-ENFORCEMENT ./bmad/measure.sh echo \"Doctrine enforcement implementation complete\")",
      "Bash(BMAD_TRACE_ID=BMAD-SETTINGS-UPDATE ./bmad/measure.sh echo \"Claude settings update complete\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\Users\\CUSTOM PC\\Desktop\\Cursor Builds\\scraping-tool"
    ]
  }
}