name: Firebase Studio App Deploy

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: 'Studio App ID'
        required: true
        type: string
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'
        type: string

  repository_dispatch:
    types: [firebase-studio-deploy]

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  deploy-studio-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.event.client_payload.branch || 'main' }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Studio app
      run: |
        npm run build
        echo "Build completed for app: ${{ github.event.inputs.app_id || github.event.client_payload.app_id }}"

    - name: Setup Firebase CLI
      run: |
        npm install -g firebase-tools
        echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" > firebase-service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS=firebase-service-account.json

    - name: Deploy to Firebase Hosting
      run: |
        firebase deploy --only hosting --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

    - name: Update deployment status in Firebase
      run: |
        node -e "
        const admin = require('firebase-admin');
        const serviceAccount = JSON.parse('${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}');

        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
          projectId: '${{ env.FIREBASE_PROJECT_ID }}'
        });

        const db = admin.firestore();
        const appId = '${{ github.event.inputs.app_id || github.event.client_payload.app_id }}';

        db.collection('studio_apps').doc(appId).update({
          status: 'deployed',
          last_deployed: new Date().toISOString(),
          deployment_commit: '${{ github.sha }}',
          deployment_branch: '${{ github.event.inputs.branch || github.event.client_payload.branch || \"main\" }}',
          deployment_url: 'https://${{ env.FIREBASE_PROJECT_ID }}.web.app',
          timestamp_last_touched: Date.now()
        }).then(() => {
          console.log('‚úÖ Deployment status updated in Firebase');
        }).catch(error => {
          console.error('‚ùå Failed to update deployment status:', error);
          process.exit(1);
        });
        "

    - name: Notify Firebase MCP Server
      run: |
        curl -X POST http://localhost:3001/mcp/firebase_write \
          -H "Content-Type: application/json" \
          -d '{
            "collection": "deployment_events",
            "payload": {
              "unique_id": "deploy_${{ github.run_id }}",
              "process_id": "github_action.deploy.${{ github.run_number }}",
              "timestamp_last_touched": '$(date +%s000)',
              "validated": true,
              "app_id": "${{ github.event.inputs.app_id || github.event.client_payload.app_id }}",
              "deployment_status": "success",
              "commit_sha": "${{ github.sha }}",
              "branch": "${{ github.event.inputs.branch || github.event.client_payload.branch || \"main\" }}",
              "deployment_url": "https://${{ env.FIREBASE_PROJECT_ID }}.web.app",
              "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'",
              "github_run_id": "${{ github.run_id }}"
            }
          }' || echo "Firebase MCP notification failed (non-blocking)"

    - name: Cleanup
      run: |
        rm -f firebase-service-account.json

  notify-completion:
    needs: deploy-studio-app
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment completion
      run: |
        STATUS="${{ needs.deploy-studio-app.result }}"
        APP_ID="${{ github.event.inputs.app_id || github.event.client_payload.app_id }}"

        if [ "$STATUS" = "success" ]; then
          echo "‚úÖ Studio app $APP_ID deployed successfully"
          echo "üåê URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app"
        else
          echo "‚ùå Studio app $APP_ID deployment failed"
        fi