{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(python:*)",
      "Bash(git init:*)",
      "Bash(git remote add:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(rm:*)",
      "Bash(cp:*)",
      "Bash(git checkout:*)",
      "Bash(git clone:*)",
      "Bash(chmod:*)",
      "Bash(make:*)",
      "Bash(git reset:*)",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: Full BMAD installation with HEIR/ORBT integration\n\nBMAD_TRACE_ID=BMAD-INITIAL\n\nüöÄ Complete BMAD (Break/Measure/Analyze/Do) system installed with full HEIR/ORBT policy enforcement.\n\n‚ú® Core BMAD Features:\n- Measurement scripts for performance tracking and regression detection\n- Analyze tools for trace inspection and error surfacing\n- Snapshot/rollback capabilities for safe experimentation\n- Atomic fix enforcement (3 files max per commit)\n\nüîí HEIR/ORBT Integration:\n- Policy-driven trace validation with required fields\n- VIN format support (IMO-YYYY-MM-SYSTEM-MODE-VN)\n- Factory health gates before execution\n- Garage scan integration for quality control\n- Event order enforcement and compliance tracking\n\nüéØ CI/CD Pipeline:\n- GitHub Actions workflow with baseline comparison\n- 10% performance regression limit enforcement\n- Automatic HEIR/ORBT policy validation\n- Trace artifacts uploaded for every run\n\nüìä TypeScript Middleware:\n- Request-level BMAD tracking for Next.js\n- Automatic trace propagation via headers\n- HEIR compliance headers (x-heir-compliant, x-orbt-tracked)\n\nüõ°Ô∏è Git Hooks:\n- commit-msg: Enforces BMAD_TRACE_ID in commits\n- pre-commit: Limits to 3 files (atomic fixes)\n- pre-push: Validates trace existence and compliance\n\nüîß Factory/Garage Integration:\n- Factory health required before operations\n- Garage scans on push\n- Blueprint validation with HEIR compliance\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(BMAD_TRACE_ID=BMAD-INITIAL ./bmad/measure.sh echo \"Initial BMAD setup complete\")",
      "Bash(touch:*)",
      "Bash(BMAD_TRACE_ID=BMAD-UPGRADE ./bmad/measure.sh echo \"BMAD upgrades complete\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: BMAD Upgrades - lanes, baselines, CI speed, dev UX\n\nBMAD_TRACE_ID=BMAD-UPGRADE\n\nüöÄ Enhanced BMAD system with practical developer experience improvements.\n\n‚ú® Escape Hatches Added:\n- BMAD_MODE=refactor allows up to 50 files with proper commit prefixes\n- BMAD_BYPASS=1 emergency override with postmortem requirement \n- Smarter git hooks with refactor mode detection\n\nüìä Smart Baselines:\n- Rolling median calculation from last 7 runs per target\n- Scenario suite configuration (cold_start, hot_path, load_n10)\n- Automated baseline building in CI\n\nüéØ Lane-based Performance Gates:\n- risk:high => 2% regression limit\n- risk:default => 5% regression limit  \n- risk:low => 10% regression limit\n- PR label-driven threshold selection\n\n‚ö° Faster CI Pipeline:\n- Parallel job execution (factory_gates, garage_checks, heir_policy, perf_guard)\n- NPM caching for faster builds\n- Path-based filtering (ignores docs, markdown)\n- Postmortem enforcement for bypass usage\n\nüõ†Ô∏è Developer Ergonomics:\n- Git commit message template (.gitmessage)\n- VSCode tasks for BMAD bench and analyze\n- Enhanced documentation with escape hatch guides\n- Log forwarding to external endpoints\n\nüîß Enhanced Features:\n- Scenario-based test suites with configurable runs\n- Baseline comparison against rolling medians vs single commits\n- Emergency bypass tracking with postmortem requirements\n- HEIR/ORBT lane policy integration\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(npm install:*)",
      "Bash(git submodule add:*)",
      "Bash(git commit:*)",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"chore: wire IMO/CTB/MCP kit + Plasmic (submodule + workflow)\n\n- Added GitHub workflow for IMO/CTB/UI standards checks\n- Created IMO trace.json and CTB blueprint.yaml stubs\n- Added .gitsubmodules.info for future submodule setup\n- Updated Makefile with imo, ctb, plasmic targets\n- Added README.imo.md with setup instructions\n- Created .env.example template for configuration\n\nBMAD_TRACE_ID=IMO-KIT-WIRE\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"chore(ctb): add Whimsical CTB schema + PR linting\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"chore(ctb): add Whimsical CTB schema + PR linting\n\nBMAD_TRACE_ID=CTB-WHIMSICAL-INTEGRATION\")",
      "Bash(BMAD_TRACE_ID=CTB-WHIMSICAL-INTEGRATION ./bmad/measure.sh echo \"CTB integration complete\")",
      "Bash(BMAD_ALLOW_MULTI=1 git commit -m \"feat: implement comprehensive CTB structure system\n\n- Added CTBNode class with altitude-based hierarchy (40k-1k)\n- Implemented programmatic CTB creation with IMO/ORBT defaults\n- Added YAML serialization/deserialization with validation\n- Created scaffold generator for rapid CTB template creation\n- Built production-ready blueprint for IMO Creator project\n- Added comprehensive documentation and usage examples\n- Integrated with existing schema validation system\n\nBMAD_TRACE_ID=CTB-STRUCTURE-SYSTEM\")",
      "Bash(BMAD_TRACE_ID=CTB-STRUCTURE-SYSTEM ./bmad/measure.sh echo \"CTB structure system implementation complete\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\Users\\CUSTOM PC\\Desktop\\Cursor Builds\\scraping-tool"
    ]
  }
}