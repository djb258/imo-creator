#!/bin/bash
# CTB Bootstrap Setup Script
# Copies global scripts, workflows, and configuration into any new repository
# Version: 1.0
# Date: 2025-10-23

set -e

echo "🌲 CTB Bootstrap Setup"
echo "======================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
CTB_FACTORY_SOURCE="ctb/sys/global-factory"
TARGET_REPO="${1:-.}"

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

# Check if running in imo-creator (source) or target repo
if [ -d "$CTB_FACTORY_SOURCE" ]; then
    echo "📦 Running from imo-creator (source repository)"
    SOURCE_MODE=true
else
    echo "🎯 Running in target repository"
    SOURCE_MODE=false
    # Look for imo-creator as sibling or in known locations
    if [ -d "../imo-creator/$CTB_FACTORY_SOURCE" ]; then
        CTB_FACTORY_SOURCE="../imo-creator/$CTB_FACTORY_SOURCE"
    elif [ -d "../imo-creator-latest/$CTB_FACTORY_SOURCE" ]; then
        CTB_FACTORY_SOURCE="../imo-creator-latest/$CTB_FACTORY_SOURCE"
    else
        print_error "Cannot find imo-creator source repository"
        echo "Please run this script from imo-creator or specify the path"
        exit 1
    fi
fi

echo ""

# Step 1: Create CTB directory structure
echo "📁 Step 1: Creating CTB directory structure..."
mkdir -p "$TARGET_REPO/ctb"/{sys,ai,data,docs,ui,meta}
mkdir -p "$TARGET_REPO/logs"
print_status "CTB directories created"

# Step 2: Copy global scripts
echo ""
echo "📜 Step 2: Copying global scripts..."
mkdir -p "$TARGET_REPO/ctb/sys/scripts"
if [ -d "ctb/docs/global-config/scripts" ]; then
    cp -r ctb/docs/global-config/scripts/* "$TARGET_REPO/ctb/sys/scripts/" 2>/dev/null || true
    print_status "Global scripts copied to ctb/sys/scripts/"
fi

# Step 3: Copy GitHub workflows
echo ""
echo "🔄 Step 3: Copying GitHub Actions workflows..."
mkdir -p "$TARGET_REPO/.github/workflows"
if [ -d "ctb/sys/ci-cd/.github/workflows" ]; then
    cp ctb/sys/ci-cd/.github/workflows/ctb_*.yml "$TARGET_REPO/.github/workflows/" 2>/dev/null || true
    cp ctb/sys/ci-cd/.github/workflows/doctrine-validate.yml "$TARGET_REPO/.github/workflows/" 2>/dev/null || true
    cp ctb/sys/ci-cd/.github/workflows/security_lockdown.yml "$TARGET_REPO/.github/workflows/" 2>/dev/null || true
    print_status "CTB enforcement workflows copied"
fi

# Step 4: Copy global configuration
echo ""
echo "⚙️ Step 4: Copying global configuration..."
mkdir -p "$TARGET_REPO/ctb/docs/global-config"
if [ -d "ctb/docs/global-config" ]; then
    cp ctb/docs/global-config/CTB_DOCTRINE.md "$TARGET_REPO/ctb/docs/global-config/" 2>/dev/null || true
    cp ctb/docs/global-config/ctb.branchmap.yaml "$TARGET_REPO/ctb/docs/global-config/" 2>/dev/null || true
    cp ctb/docs/global-config/global_manifest.yaml "$TARGET_REPO/ctb/docs/global-config/" 2>/dev/null || true
    print_status "Global configuration files copied"
fi

# Step 5: Create/Update global-config.yaml
echo ""
echo "📝 Step 5: Creating global-config.yaml with doctrine enforcement..."

cat > "$TARGET_REPO/global-config.yaml" <<'EOF'
# Global CTB Configuration
# Auto-generated by setup_ctb.sh
version: 1.3.3
last_updated: $(date +%Y-%m-%d)

ctb:
  structure:
    root: ctb/
    branches:
      - sys    # System infrastructure
      - ai     # AI agents & MCP
      - data   # Databases & schemas
      - docs   # Documentation
      - ui     # Frontend & apps
      - meta   # Configuration & tests

doctrine_enforcement:
  # Global factory for CTB scripts and workflows
  ctb_factory: ctb/sys/global-factory/

  # Automatic synchronization with imo-creator master
  auto_sync: true

  # Minimum CTB compliance score required (0-100)
  min_score: 90

  # Composio scenario for automated compliance checks
  composio_scenario: CTB_Compliance_Cycle

  # Enforcement scripts
  scripts:
    verify: ctb/sys/scripts/ctb_verify.sh
    enforce: ctb/sys/scripts/ctb_enforce.sh
    init: ctb/sys/scripts/ctb_init.sh

  # GitHub Actions workflows
  workflows:
    - ctb_enforcement.yml
    - ctb_drift_check.yml
    - ctb_health.yml
    - doctrine-validate.yml
    - security_lockdown.yml

barton_doctrine:
  version: 1.3.3
  heir_orbt: enabled
  branch_structure: 20-branches

mcp:
  composio_port: 3001
  heir_tracking: required
  orbt_layers: 4
EOF

print_status "global-config.yaml created"

# Step 6: Copy HEIR/ORBT utilities
echo ""
echo "🎯 Step 6: Copying HEIR/ORBT utilities..."
mkdir -p "$TARGET_REPO/ctb/ai/orbt-utils"
if [ -d "ctb/ai/orbt-utils" ]; then
    cp ctb/ai/orbt-utils/* "$TARGET_REPO/ctb/ai/orbt-utils/" 2>/dev/null || true
    print_status "HEIR/ORBT utilities copied"
fi

# Step 7: Create .gitignore if it doesn't exist
echo ""
echo "🔒 Step 7: Setting up .gitignore..."
if [ ! -f "$TARGET_REPO/.gitignore" ]; then
    cat > "$TARGET_REPO/.gitignore" <<'EOF'
# CTB Structure
node_modules/
*.pyc
__pycache__/
.env
.env.*
!.env.example

# Logs
logs/*.log
*.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Build
dist/
build/
*.egg-info/

# Secrets (NEVER commit)
*secret*
*credential*
*.key
*.pem
EOF
    print_status ".gitignore created"
else
    print_warning ".gitignore already exists, skipping"
fi

# Step 8: Create README if needed
echo ""
echo "📖 Step 8: Checking README..."
if [ ! -f "$TARGET_REPO/README.md" ]; then
    cat > "$TARGET_REPO/README.md" <<'EOF'
# Repository Name

**CTB (Christmas Tree Backbone) Structured Repository**

## Quick Start

This repository follows the Barton Doctrine CTB structure:

```
ctb/
├── sys/     # System infrastructure
├── ai/      # AI agents & MCP
├── data/    # Databases & schemas
├── docs/    # Documentation
├── ui/      # Frontend & apps
└── meta/    # Configuration & tests
```

## Setup

1. Install dependencies
2. Run CTB verification: `bash ctb/sys/scripts/ctb_verify.sh`
3. Start development

## Documentation

- See `ctb/docs/global-config/CTB_DOCTRINE.md` for architecture details
- See `CTB_INDEX.md` for file mapping

## Compliance

- **CTB Compliance**: Required (min 90%)
- **Barton Doctrine Version**: 1.3.3
- **Enforcement**: Automated via GitHub Actions
EOF
    print_status "README.md created"
else
    print_warning "README.md already exists, skipping"
fi

# Step 9: Summary
echo ""
echo "=================================================="
echo "✅ CTB Bootstrap Complete!"
echo "=================================================="
echo ""
echo "📋 What was installed:"
echo "   - CTB directory structure"
echo "   - Global enforcement scripts"
echo "   - GitHub Actions workflows"
echo "   - Global configuration files"
echo "   - HEIR/ORBT utilities"
echo "   - global-config.yaml"
echo ""
echo "🎯 Next steps:"
echo "   1. Review global-config.yaml and customize if needed"
echo "   2. Run: bash ctb/sys/scripts/ctb_verify.sh"
echo "   3. Initialize branches: bash ctb/sys/scripts/ctb_init.sh"
echo "   4. Commit changes: git add -A && git commit -m '🌲 Initialize CTB structure'"
echo ""
echo "📖 Documentation: ctb/docs/global-config/CTB_DOCTRINE.md"
echo ""
echo "🌲 Your repository is now CTB-compliant!"
