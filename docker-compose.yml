version: '3.8'

services:
  # MCP Servers
  mcp-servers:
    build: 
      context: .
      target: development
    ports:
      - "3000-3020:3000-3020"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - USE_MOCK=true
      - MCP_KILL_SWITCH=false
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: mcp_system
      POSTGRES_USER: mcp_app
      POSTGRES_PASSWORD: development_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mcp-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network

  # Nginx reverse proxy
  nginx:
    image: nginx:stable
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-servers
    networks:
      - mcp-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - mcp-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  mcp-network:
    driver: bridge